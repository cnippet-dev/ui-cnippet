import path from "path";

import fs from "fs/promises";
import { styles } from "../registry/registry-styles";
import { registry } from "../registry/index";
import type { Registry, RegistryEntry } from "../registry/schema";
import type { Style } from "../registry/registry-styles";

const REGISTRY_PATH = path.join(process.cwd(), "public/r");

async function buildRegistry(entries: Registry) {
    let index = `// @ts-nocheck
// This file is autogenerated by scripts/create-registry.js
// Do not edit this file directly.
import * as React from "react"

export const Index = {
`;

    for (const style of styles as readonly Style[]) {
        index += `  "${style.name}": {`;

        // Build style index.
        for (const item of entries as readonly RegistryEntry[]) {
            type RegistryItemFile = NonNullable<RegistryEntry["files"]>[number];

            const resolveFiles = item.files?.map(
                (file: RegistryItemFile) => `${typeof file === "string" ? file : file.path}`,
            );
            if (!resolveFiles) {
                continue;
            }

            const type = item.type.split(":")[1];

            let componentPath = `@/${type}/${item.name}`;

            if (item.files) {
                const files = item.files.map((file: RegistryItemFile) =>
                    typeof file === "string"
                        ? { type: "registry:page", path: file }
                        : file,
                );
                if (files?.length) {
                    componentPath = `@/${files[0].path}`;
                }
            }

            index += `
      "${item.name}": {
        name: "${item.name}",
        type: "${item.type}",
        slug: "${item.slug || ""}",
        thumbnail: "${item.thumbnail || ""}",
        number: "${item.number || ""}",
        registryDependencies: ${JSON.stringify(item.registryDependencies || undefined)},
        files: [${resolveFiles.map((file: string) => `"${file}"`)}],
        component: React.lazy(() => import("${componentPath}")),
      },`;
        }

        index += `
    },`;
    }

    index += `
}
`;

    // Build registry/index.json
    const items = (entries as readonly RegistryEntry[])
        .filter((item) => ["registry:ui"].includes(item.type))
        .map((item) => {
            return {
                ...item,
                files: item.files?.map((_file) => {
                    const file =
                        typeof _file === "string"
                            ? {
                                  path: _file,
                                  type: item.type,
                              }
                            : _file;

                    return file;
                }),
            };
        });
    const registryJson = JSON.stringify(items, null, 2);

    try {
        // Ensure the REGISTRY_PATH directory exists
        await fs.mkdir(REGISTRY_PATH, { recursive: true });

        // Write the registry JSON file
        await fs.writeFile(
            path.join(REGISTRY_PATH, "index.json"),
            registryJson,
            "utf8",
        );

        // Write the registry index file
        await fs.writeFile(
            path.join(process.cwd(), "__registry__/index.tsx"),
            index,
            "utf8",
        );

        console.log("âœ… Registry built successfully!");
    } catch (error) {
        console.error("Error building registry:", error);
        process.exit(1);
    }
}

// Run the build
buildRegistry(registry).catch((error) => {
    console.error("Failed to build registry:", error);
    process.exit(1);
});
